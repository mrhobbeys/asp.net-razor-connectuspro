@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_FranchiseSelectionLayout.cshtml";
}

@section Styles {
    <link href="../../../../Content/StyleSheet.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/codebase/dhtmlxcombo.css")" />
    <link rel="stylesheet" type="text/css" href="../../../../codebase/dhtmlxgrid.css" />
    <link rel="stylesheet" type="text/css" href="../../../../codebase/skins/dhtmlxgrid_dhx_skyblue.css">
    @*<link href="../../../../codebase/dhtmlxcalendar.css" rel="stylesheet" type="text/css" />*@
    <link href="../../../../Content/Tablestyle.css" rel="stylesheet" type="text/css" />
    @*<link rel="stylesheet" type="text/css" href="../../../../codebase/dhtmlxwindows.css" />
    <link rel="stylesheet" type="text/css" href="../../../../codebase/skins/dhtmlxwindows_dhx_skyblue.css" />*@
    <link href="../../../../Content/Report.css" rel="stylesheet" type="text/css" />
    <link rel="shortcut icon" href="../../../../../../common/favicon.ico" type="image/x-icon" />
    <link rel="stylesheet" href="../../../../../../common/css/style.css" type="text/css" media="screen" />
    <link href="../../../../Content/Site.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" type="text/css" href="../../../../../codebase/skins/dhtmlxcalendar_dhx_skyblue.css" />
    <link href="../../../../codebase/dhtmlxgrid_pgn_bricks.css" rel="stylesheet" type="text/css" />
    @*<link rel="Stylesheet" type="text/css" href="../../../../codebase/dhtmlxtabbar.css" />*@
    <link href="../../../../codebase/dhtmlxgrid_pgn_bricks.css" rel="stylesheet" type="text/css" />    
}
@section ScriptIncludes {    
    <script src="@Url.Content("~/codebase/dhtmlxcommon.js")" type="text/javascript"></script>
    <script  src="@Url.Content("~/codebase/dhtmlxcombo.js")" type="text/javascript"></script>
    <script  src="@Url.Content("~/codebase/ext/dhtmlxcombo_extra.js")" type="text/javascript"></script>    
    <script src="../../../../codebase/dhtmlxgrid.js" type="text/javascript"></script>
    <script src="../../../../codebase/dhtmlxgridcell.js" type="text/javascript"></script>
    <script src="../../../../common/dhtmlxgrid_excell_link.js" type="text/javascript"></script>
    @*<script src="../../../../codebase/dhtmlxcalendar.js" type="text/javascript"></script>*@
    @* filter.js script required in order to show checkbox in the header*@
    <script src="../../../../codebase/dhtmlxgrid_filter.js" type="text/javascript"></script>
    <script src="../../../../codebase/ext/dhtmlxgrid_export.js" type="text/javascript"></script>
    @*<script src="../../../../codebase/dhtmlxwindows.js" type="text/javascript"></script>*@
    <script src="../../../../codebase/dhtmlxcontainer.js" type="text/javascript"></script>
    <script src="../../../../codebase/dhtmlxgrid_pgn.js" type="text/javascript"></script>
    @*<script src="../../../../codebase/dhtmlxtabbar.js" type="text/javascript"></script>
    <script src="../../../../codebase/dhtmlxtabbar_start.js" type="text/javascript"></script>*@
    <script src="../../../../codebase/dhtmlxgrid_srnd.js" type="text/javascript"></script>
    <script src="../../../../codebase/ext/dhtmlxgrid_validation.js" type="text/javascript"></script>
    <script src="../../../../codebase/json2.js" type="text/javascript"></script>
}
@section InlineScript {
    <script type="text/javascript">
        $(document).ready(function () {
            $('#btnDelete').attr('disabled', 'disabled');


            $('#btnDelete').click(function () {
            var flag = window.confirm("Do you really want to delete this row?");
                if (flag) {
                    var id = $('#lblId').text();
                  
                    var params = { Id: id
                    };
                    $.ajax({
                        type: "POST",
                        url: "../ZipList/DeleteZipList",
                        data: JSON.stringify(params),
                        contentType: "application/json; charset=utf-8",
                        success: function (result) {
                            if (result.Success) {
                                alert('Record Deleted Successfully');
                                LoadData();
                                $('#btnDelete').attr('disabled', true);
                            }
                            else {
                                alert(result.Message);
                            }
                        },
                        dataType: "json",
                        error: function (xhr, status, error) {
                     }
                    });
                }
                else {
                }
             });
            SiteBlue.renderMenu(false);
            $(SiteBlue).bind("FranchiseChanged", function (e, data) {
                LoadData();
            });
            $('#ajaxindicator').ajaxStart(function () { $(this).show(); });
            $('#ajaxindicator').ajaxStop(function () { $(this).hide(); });
            InitGrid();
            LoadData();
        });

        function InitGrid() {
            ziplistGrid = new dhtmlXGridObject('gridbox');
            ziplistGrid.setImagePath("../../../../codebase/imgs/");
            ziplistGrid.setHeader("Franchise Zip ID, Date Added, OwnedYN, ServicesYN, City, State, Country, Call Taker Message, Zip ID");
            ziplistGrid.attachHeader("#text_filter,#text_filter,,,#text_filter,#text_filter,#text_filter,#text_filter");
            ziplistGrid.setColAlign("right,left,left,left,left,left,left,left,right");
            ziplistGrid.setColTypes("ed,ro,ch,ch,ed,ed,ed,txt,ro");
            ziplistGrid.setColSorting("int,str,str,str,str,str,str,str");
            ziplistGrid.setInitWidthsP("10,15,7,7,10,10,10,30");                        
            ziplistGrid.enablePaging(true, 20, 3, "pager", false);
            ziplistGrid.setPagingSkin("bricks");
            ziplistGrid.setColumnHidden(8, true);
            ziplistGrid.setSkin("dhx_skyblue");
            ziplistGrid.enableValidation(true,true);
            ziplistGrid.setColValidators(["NotEmpty", null, "ValidBoolean", "ValidBoolean", null, null, null, null, null]);
            ziplistGrid.attachEvent("onRowSelect", function (id, ind) {
           $('#lblId').text(id);
           $('#btnDelete').attr('disabled', false);
              

            });
//            ziplistGrid.attachEvent("onCellChanged", function (id, index, value) {
//                //alert('onCellChanged' + id + index + value);
//                if (index == 0 && value == "")
//                    ziplistGrid.cells(id, index).setCValue("Cannot be left blank");
//            });
            ziplistGrid.attachEvent("onEditCell", function (stage, id, index, new_value, old_value) {
                //alert('onEditCell' + stage + id + index + new_value + old_value);
                if (stage == 2 && index == 0 && (new_value == '' || new_value == null))
                    return false; //deny edit operation
                else
                    return true;
            });
            ziplistGrid.init();
            ziplistGrid.clearAll();
        }

        function LoadData() {
            var payLoad = { franchiseID: SiteBlue.franchiseId };
            $.ajax({
                type: "POST",
                url: "/Admin/ZipList/GetZipList/",
                data: JSON.stringify(payLoad),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    if (result.Success) {
                        ziplistGrid.clearAll();
                        ziplistGrid.loadXMLString(result.ResultData);                        
                    }
                    else {
                        alert(result.Message);
                    }
                },
                error: function (xhr, status, error) {
                    alert(error);
                }
            });
        }

        function addZipList() {
//            if (SiteBlue.isCorporate == false || SiteBlue.isCorporate == "false") {
//                alert("You do not have access to manage Zip List");
//                return;
//            }

            var now = dateFormat(new Date(), "fullDate");                       

            ziplistGrid.addRow(ziplistGrid.uid(), ["", now, 0, 0, "", "", "", "", 0], 0);
            ziplistGrid.selectRow(0, 0);
            ziplistGrid.editCell();            
        }


       
        function saveZipList() {
//            if (SiteBlue.isCorporate == false || SiteBlue.isCorporate == "false") {
//                alert("You do not have access to manage Zip List");
//                return;
//            }

            if (ziplistGrid.getRowsNum() == 0)
                return;                       

            var changedrows = ziplistGrid.getChangedRows(true);

            if (changedrows != "") {
                $("#btnSaveZipList").attr("disabled", "disabled");
                var params = [];
                var franchiseid = SiteBlue.franchiseId;

                var z = changedrows.split(",");
                for (var i = 0; i < z.length; i++) {
                    var rindex = ziplistGrid.getRowIndex(z[i]);

                    var zipid = ziplistGrid.cellByIndex(rindex, 8).getValue();
                    var franchiseZipID = ziplistGrid.cellByIndex(rindex, 0).getValue();
                    var ownedYN = ziplistGrid.cellByIndex(rindex, 2).getValue();
                    var servicesYN = ziplistGrid.cellByIndex(rindex, 3).getValue();
                    var city = ziplistGrid.cellByIndex(rindex, 4).getValue();
                    var state = ziplistGrid.cellByIndex(rindex, 5).getValue();
                    var country = ziplistGrid.cellByIndex(rindex, 6).getValue();
                    var callTakerMessage = ziplistGrid.cellByIndex(rindex, 7).getValue();

                    if (franchiseZipID == '') {
                        alert('Franchise Zip ID can\'t be left blank for row index: ' + rindex + '.');
                        $("#btnSaveZipList").removeAttr("disabled");
                        return;
                    }

                    params.push({
                        ZipID: zipid,
                        FranchiseZipID: franchiseZipID,
                        FranchiseID: franchiseid,
                        ActiveYN: true,
                        OwnedYN: (ownedYN == 1 ? true : false),
                        ServicesYN: (servicesYN == 1 ? true : false),
                        City: city,
                        State: state,
                        Country: country,
                        CallTakerMessage: callTakerMessage
                    });
                }

                //alert(JSON.stringify(params));                

                $.ajax({
                    type: "POST",
                    url: "/ZipList/AddUpdateZipList",
                    dataType: "json",
                    data: JSON.stringify(params),
                    contentType: "application/json; charset=utf-8",
                    success: function (result) {
                        if (result.Success) {
                            alert(result.Message);
                            LoadData();
                        }
                        else {
                            alert(result.Message); 
                        }

                        $("#btnSaveZipList").removeAttr("disabled");
                    },                    
                    error: function (xhr, status, error) {
                        $("#btnSaveZipList").removeAttr("disabled");
                        alert(error);
                    }
                });
            }
        }

        function ExportToExcel() {
            ziplistGrid.toExcel("../ZipList/DownloadZipList");
        }

        var dateFormat = function () {
            var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        timezoneClip = /[^-+\dA-Z]/g,
        pad = function (val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) val = "0" + val;
            return val;
        };

            // Regexes and supporting functions are cached through closure
            return function (date, mask, utc) {
                var dF = dateFormat;

                // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
                if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
                    mask = date;
                    date = undefined;
                }

                // Passing date through Date applies Date.parse, if necessary
                date = date ? new Date(date) : new Date;
                if (isNaN(date)) throw SyntaxError("invalid date");

                mask = String(dF.masks[mask] || mask || dF.masks["default"]);

                // Allow setting the utc argument via the mask
                if (mask.slice(0, 4) == "UTC:") {
                    mask = mask.slice(4);
                    utc = true;
                }

                var _ = utc ? "getUTC" : "get",
            d = date[_ + "Date"](),
            D = date[_ + "Day"](),
            m = date[_ + "Month"](),
            y = date[_ + "FullYear"](),
            H = date[_ + "Hours"](),
            M = date[_ + "Minutes"](),
            s = date[_ + "Seconds"](),
            L = date[_ + "Milliseconds"](),
            o = utc ? 0 : date.getTimezoneOffset(),
            flags = {
                d: d,
                dd: pad(d),
                ddd: dF.i18n.dayNames[D],
                dddd: dF.i18n.dayNames[D + 7],
                m: m + 1,
                mm: pad(m + 1),
                mmm: dF.i18n.monthNames[m],
                mmmm: dF.i18n.monthNames[m + 12],
                yy: String(y).slice(2),
                yyyy: y,
                h: H % 12 || 12,
                hh: pad(H % 12 || 12),
                H: H,
                HH: pad(H),
                M: M,
                MM: pad(M),
                s: s,
                ss: pad(s),
                l: pad(L, 3),
                L: pad(L > 99 ? Math.round(L / 10) : L),
                t: H < 12 ? "a" : "p",
                tt: H < 12 ? "am" : "pm",
                T: H < 12 ? "A" : "P",
                TT: H < 12 ? "AM" : "PM",
                Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
            };

                return mask.replace(token, function ($0) {
                    return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
                });
            };
        } ();

        // Some common format strings
        dateFormat.masks = {
            "default": "ddd mmm dd yyyy HH:MM:ss",
            shortDate: "m/d/yy",
            mediumDate: "mmm d, yyyy",
            longDate: "mmmm d, yyyy",
            fullDate: "dddd, mmmm d, yyyy",
            shortTime: "h:MM TT",
            mediumTime: "h:MM:ss TT",
            longTime: "h:MM:ss TT Z",
            isoDate: "yyyy-mm-dd",
            isoTime: "HH:MM:ss",
            isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
            isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
        };

        // Internationalization strings
        dateFormat.i18n = {
            dayNames: [
        "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    ],
            monthNames: [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
        "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
    ]
        };

        // For convenience...
        Date.prototype.format = function (mask, utc) {
            return dateFormat(this, mask, utc);
        };

    </script>
}
<div style="width: 100%; float: left; background-color: #D5F1FF;">    
    <div class="div">
        <label style="font-size: larger; font-weight: bold; margin-left: 2%;">Zip List</label>
        <div class="div" id="ajaxindicator" align="center">
            <img src="../../../../Images/ajax-loader.gif" alt="Please wait..." />
        </div>
        <div id="gridbox" style="float: left; height: 300px; width: 96%; margin-top: 5px;
            margin-left: 2%; margin-right: 2%">
        </div>
        <div id="pager" style="width: 96%; margin-left: 2%; margin-right: 2%"">
        </div>
    </div>
    <div style="width: 98%; float: left; font-family: Verdana; font-weight: bold; margin-left: 2%; height: 25px;">  

        <div style="float: left">
            <input id="btnSaveZipList" type="button" value="Save All Changes" onclick="saveZipList();" />
        </div>
        <div style="float: left; padding-left: 10px">
            <input id="btnAddZipList" type="button" onclick="(arguments[0]||window.event).cancelBubble=true; addZipList()" value="Add New" />
        </div>
        <div style="float: left; margin-left: 10px">
            <input id="ExportButton" type="button" onclick="ExportToExcel()" value="Export to Excel" />
        </div>        
         <div style="float: left; margin-left: 10px">
            <input id="btnDelete" type="button" value="Delete Selected Row" />
        </div>    
        
            <div style="float: left; margin-left: 10px">
           <label id="lblId" style="display:none;" ></label>
        </div>     
    </div>
</div>